import{_ as l,o as i,c as e,O as p}from"./chunks/framework.95b9d657.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"moment_src/必背题_项目场景.md","filePath":"moment_src/必背题_项目场景.md"}'),o={name:"moment_src/必背题_项目场景.md"},t=p('<h2 id="_1、微信扫码登陆" tabindex="-1">1、微信扫码登陆 <a class="header-anchor" href="#_1、微信扫码登陆" aria-label="Permalink to &quot;1、微信扫码登陆&quot;">​</a></h2><p>我之前做的一个结合 electron 的后台管理系统，其中有一个扫码登陆登陆，首先要对登陆的账号绑定微信登陆的信息、 然后再使用扫码登陆</p><p>这个绑定微信的过程：</p><ol><li><p>在用户管理页面，点击绑定按钮：此时就会发送消息通知主进程 （渲染进程 给主进程传递token）</p></li><li><p>主进程收到消息就会创建一个新窗口，这个新窗口里面渲染了一张后端给前端的二维码图片，通过微信扫码绑定</p></li><li><p>扫码之后，就把页面关闭，然后监听url的改变：</p><ul><li>如果 url 发生变化，就发送一个请求，携带token、绑定信息等参数</li></ul></li><li><p>前端这边发送请求之后，后端那边做一些处理，然后给微信的服务器发送请求，会得到一个 code 码最后返回前端</p></li><li><p>主进程这边接收到 code 码之后，就发给渲染进程，渲染进程拿到之后就提示微信已经授权等信息，然后再把code码 发到后台去保存，后台那边就会返回已经绑定了，绑定成功等提示消息</p></li><li><p>把账号绑定了微信登陆信息之后，我们就可以使用这个账号来进行扫码登陆了，在登陆页面点击扫码登陆：</p></li><li><p>这时候主进程会弹出一个扫码登陆的页面，扫码之后会发送一个登陆请求，返回微信授权的code码，主进程把这个 code码发送到渲染进程，渲染进程拿到code码之后，把code码发送到后台进行校验，验证通过之后就返回用户信息， 然后就是正常的登陆流程了</p></li></ol><h2 id="_2、登陆鉴权" tabindex="-1">2、登陆鉴权 <a class="header-anchor" href="#_2、登陆鉴权" aria-label="Permalink to &quot;2、登陆鉴权&quot;">​</a></h2><p>首先是在登录页面登录，输入用户名和密码，点击登陆就会发送一个登陆请求：</p><ol><li><p>登录成功后台就会返回一些数据，然后这里的操作可以写一个 hooks，在 hooks 里面获取 token 并且写入 localStorage 中，并且在 hooks 里面还会调用 store，store 通过 token 获取用户信息，包括权限码和用户的其他信息</p></li><li><p>当用户登录到主界面的时候，页面路由是根据 动态获取的菜单列表数据中的 url 信息动态添加的：</p><ul><li><p>首先，从接口获取菜单数据，但返回的菜单数据可能不符合我们前端多级菜单组件的格式要求，因此需要 对数据进行重构</p></li><li><p>把数据重构成可以方便遍历访问的 二级菜单数据格式</p></li><li><p>然后构造路由表，是一个数组，里面元素是一个个路由对象，有 path，name，component等属性</p></li><li><p>通过 addRoute 方法，把重构的路由对象动态添加到路由表中</p></li><li><p>登录成功之后，左侧的菜单栏会根据 这个权限码获取到对应的菜单信息，动态渲染出来， 也就是说：超级管理员可能有30个菜单数据，而普通用户只显示10个菜单</p></li></ul></li><li><p>页面权限，判断某某用户如果没有对应的权限不可以进入某某路由</p><ul><li><p>在 beforeEach 前置导航守卫里面进行判断：</p><ul><li><p>如果是超级管理员直接next通行</p></li><li><p>如果不是超级管理员，需要拿到当前用户的所有路由信息（扁平化：map对象）和 当前的路由判断，如果不存在，就提示用户并跳转到一个错误页面</p></li></ul></li></ul></li><li><p>按钮级别权限，可以使用自定义指令对页面的按钮、超链接也做权限控制，流程大概是：</p><ul><li><p>用户登录的时候，需要请求 【个人信息】 的接口，然后接口会返回一些用户信息，里面包括了 权限信息</p></li><li><p>这时候我们把从后端返回的 用户的 “权限信息” 保存起来</p></li><li><p>然后新建一个自定义指令 v-auth=&#39;某某权限字符&#39;，这个自定义指令的逻辑是：</p><p>1、先判断指令有没有传值，是否正确传值</p><p>2、在用户的权限信息中，查询有没有该指令对应的权限信息</p><p>3、有就return，没用就获取指令元素的父级，通过removeChild删除该元素，把按钮删除</p></li></ul></li><li><p>总结一下，其实权限是由角色来控制的：</p><ul><li><p>给某个用户新增一个权限，其实就是给用户添加一个角色</p></li><li><p>角色的添加过程是：</p><ul><li><p>点击角色新增按钮</p></li><li><p>通过请求去获取菜单权限树</p></li><li><p>选择对应的权限，其实就是选择了某权限的id</p></li><li><p>当点击【确认新增】，需要给后端发送请求，传递 权限id 等参数</p></li><li><p>后端那边会把多个权限id，组合成一个 角色， 一个角色对应一个ID（ 这个id就是多个权限生成）</p></li></ul></li><li><p>如果要给某个用户删除一个权限，其实就是在用户上删除一个角色</p></li><li><p>注意：如果当前用户正在使用这个角色来获得操作角色增删改的权限，那么它直接删除这个角色后台会报引用资源错误</p></li></ul></li></ol><p>这就是我所做的 登录鉴权</p><h2 id="_3、你在项目中怎么划分组件-封装组件的" tabindex="-1">3、你在项目中怎么划分组件，封装组件的？ <a class="header-anchor" href="#_3、你在项目中怎么划分组件-封装组件的" aria-label="Permalink to &quot;3、你在项目中怎么划分组件，封装组件的？&quot;">​</a></h2><h2 id="_4、有做过即时通信吗-有了解-socket-websocket-吗" tabindex="-1">4、有做过即时通信吗？（有了解 socket \\ websocket 吗？） <a class="header-anchor" href="#_4、有做过即时通信吗-有了解-socket-websocket-吗" aria-label="Permalink to &quot;4、有做过即时通信吗？（有了解 socket \\ websocket 吗？）&quot;">​</a></h2>',10),a=[t];function r(c,_,s,n,d,h){return i(),e("div",null,a)}const k=l(o,[["render",r]]);export{m as __pageData,k as default};
